{"version":3,"sources":["WebSocketConnection.tsx","BarrageItem.tsx","Barrage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["WebSocketConnection","props","deviceId","ws","hbStarted","registered","registerResp","reg","canvas","context","componentDidMount","init","baseUrl","ishttps","document","location","protocol","socketConnectionUrl","window","WebSocket","onopen","openSocket","onmessage","onMessage","onclose","closeSocket","send","event","console","log","data","startsWith","msg","JSON","parse","substr","onData","stringify","setInterval","currentDeviceId","localStorage","getItem","uuid","replace","setItem","now","Date","method","host","querys","headers","toString","toUTCString","getTime","path","body","Component","BarrageItem","className","id","fromName","message","type","onClick","updateCheckStatus","ControllStatus","label","value","axios","defaults","baseURL","Barrage","a","getBarragesList","getControlStatus","get","result","barrages","Object","keys","map","key","filter","item","checkStatus","setState","status","filterWords","put","changeControl","confirmUpdate","Dialog","confirm","content","onOk","state","post","setBarrageList","push","renderOption","index","href","style","marginRight","this","paddingTop","overflowY","dataSource","onChange","barrage","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.02ca2cc4.chunk.js","sourcesContent":["import { Component } from 'react';\nimport * as uuid from 'uuid';\ntype Props = {\n    baseUrl: string,\n    onData: (data: any) => void\n};\nconst barrageArray: any = [];\nlet ani: any = null;\n// 存储实例\nconst store: any = {};\n\n\n\nclass WebSocketConnection extends Component<Props, any> {\n    protected deviceId: string = '';\n    protected ws: any;\n    protected hbStarted: boolean = false;\n    protected registered: boolean = false;\n    protected registerResp: boolean = false;\n    protected reg: any;\n    canvas: any;\n    context: any;\n    constructor(props: Props) {\n        super(props);\n        const currentDeviceId = window.localStorage.getItem('s-admin-deviceId');\n        this.deviceId = currentDeviceId || uuid.v4().replace(/-/g, '').substr(0, 8);\n        window.localStorage.setItem('s-admin-deviceId', this.deviceId);\n        const now = new Date();\n        this.reg = {\n            method: 'GET',\n            host: `${props.baseUrl}:8080`,\n            querys: {\n                'docId': 'devs',\n                'type': 'admin',\n                'userId': this.deviceId,\n            },\n            headers: {\n                'x-ca-websocket_api_type': ['REGISTER'],\n                'x-ca-seq': ['0'],\n                'x-ca-nonce': [uuid.v4().toString()],\n                'date': [now.toUTCString()],\n                'x-ca-timestamp': [now.getTime().toString()],\n                'CA_VERSION': ['1'],\n            },\n            path: '/r',\n            body: '',\n        };\n    }\n\n    componentDidMount = () => {\n        this.init();\n\n    }\n\n    init = () => {\n        const { baseUrl } = this.props;\n        const ishttps = 'https:' == document.location.protocol ? true: false;\n        const socketurl = ishttps ? 'wss:':'ws:';\n        const socketConnectionUrl = `${socketurl}//${baseUrl}:8080`;\n        const ws = new window.WebSocket(socketConnectionUrl);\n        this.ws = ws;\n        ws.onopen = this.openSocket;\n        ws.onmessage = this.onMessage;\n        ws.onclose = this.closeSocket;\n    }\n\n    openSocket = () => {\n\n        this.ws.send('RG#' + this.deviceId);\n    }\n\n    closeSocket = () => {\n\n    }\n\n    onMessage = (event: any) => {\n        console.log('data:', event.data);\n        if (event.data.startsWith('NF#')) {\n\n            const msg = JSON.parse(event.data.substr(3));\n            \n            this.props.onData(msg);\n            return;\n        }\n\n        if (!this.hbStarted && event.data.startsWith('RO#')) {\n            console.log('login successfully');\n            if (!this.registered) {\n                this.registered = true;\n                this.ws.send(JSON.stringify(this.reg));\n            }\n\n            this.hbStarted = true;\n            setInterval(() => {\n                this.ws.send('H1');\n            }, 15 * 1000);\n\n\n            return;\n        }\n\n\n    }\n\n    render() {\n\n        return (\n            <div>\n            </div>\n        );\n    }\n}\n\nexport default WebSocketConnection;\n","import { Component } from 'react';\nimport { Input, Button } from '@b-design/ui';\nimport './barrage.scss';\ntype Props = {\n    data: any,\n    updateCheckStatus: (id: any, status: any) => void;\n};\n\n\nfunction BarrageItem(props: Props) {\n    return (\n        <div className=\"barrage-item-container\">\n            <div className=\"barrage-item-top\">\n                <div className=\"basic-info\">\n                    <div className=\"item\"> <span>弹幕编号：</span><span>{props.data.id}</span></div>\n                    <div className=\"item\"> <span>弹幕作者：</span><span>{props.data.fromName}</span></div>\n                </div>\n                <div className=\"barrage-content\">\n                    {props.data.message}\n                </div>\n            </div>\n            <div className=\"barrage-item-bottom\">\n                <Button type=\"primary\" className=\"btn\" onClick={() => props.updateCheckStatus(props.data.id, 1)}>通过</Button>\n                <Button className=\"btn\" onClick={() => props.updateCheckStatus(props.data.id, 2)} >拒绝</Button>\n            </div>\n        </div>\n    );\n}\n\nexport default BarrageItem;\n\n","import { Component } from 'react';\nimport axios from 'axios';\nimport { Input, Button, Select, Table, Dialog } from '@b-design/ui';\nimport WebSocketConnection from './WebSocketConnection';\nimport BarrageItem from './BarrageItem';\nimport './barrage.scss';\nconst ControllStatus = [{\n    label: '无控制',\n    value: 0\n}, {\n    label: '设置过滤字段',\n    value: 1\n},\n{\n    label: '设置管理员拦截',\n    value: 2\n}]\ntype Props = {\n\n};\nconst baseUrl = ''; // 本地调试的时候可以设置固定值\naxios.defaults.baseURL = '/api';\nclass Barrage extends Component<Props, any> {\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            barrages: [],\n            status: 0,\n            filterWords: []\n        }\n    }\n\n    componentDidMount = async () => {\n        await this.getBarragesList();\n        await this.getControlStatus();\n\n    }\n\n    getBarragesList = async () => {\n        const result: any = await axios.get('/barrage');\n        const data = result.data;\n        const barrages = Object.keys(data).map((key) => data[key]).filter(item => item.checkStatus === 0);\n        this.setState({\n            barrages\n        })\n    }\n\n    getControlStatus = async () => {\n        const result: any = await axios.get('/status');\n\n        const data = result.data;\n        this.setState({\n            status: data.status || 0,\n            filterWords: data.filterWords || []\n        })\n\n    }\n    updateCheckStatus = async (id: any, checkStatus: any) => {\n        const result = await axios.put(`/barrage/${id}`, { checkStatus });\n\n        await this.getBarragesList();\n    }\n\n    changeControl = (status: any) => {\n        this.setState({\n            status\n        })\n    }\n\n    confirmUpdate = async () => {\n        Dialog.confirm({\n            content: '确认修改配置？',\n            onOk: async () => {\n                const { status, filterWords } = this.state;\n                const result: any = await axios.post('/status', {\n                    status,\n                    filterWords\n                });\n                console.log(result)\n            }\n        })\n\n    }\n\n    setBarrageList = (data: any) => {\n        const { barrages } = this.state;\n        barrages.push(data);\n        this.setState({\n            barrages\n        })\n    }\n\n    renderOption = (value: any, index: any, data: any) => {\n        return <div>\n            <a href=\"javascript:void(0)\" style={{ marginRight: 10 }} onClick={() => {\n                this.updateCheckStatus(value, 1);\n            }}>通过</a>\n            <a href=\"javascript:void(0)\" style={{ marginRight: 10 }} onClick={() => {\n                this.updateCheckStatus(value, 2);\n            }}>拒绝</a>\n        </div>\n    }\n\n    render() {\n        const { barrages, status } = this.state;\n        return (\n            <div className=\"barrage-list-container\" style={{ paddingTop: 60, overflowY: 'auto' }}>\n                <WebSocketConnection baseUrl={baseUrl || window.location.host} onData={(data) => this.setBarrageList(data)} />\n                <div className=\"control-container\">\n                    <span className=\"control-span\">当前控制状态: </span> <Select dataSource={ControllStatus} value={status} onChange={this.changeControl} style={{ marginRight: 20 }} />\n                    <Button type=\"primary\" onClick={this.confirmUpdate}>确认修改</Button>\n                </div>\n               \n                <div className=\"barrage-list\">\n                    {/* <div style={{ marginBottom: 20 }}>弹幕列表</div> */}\n                    {barrages.map((barrage: any) => {\n                        return <BarrageItem data={barrage} key={barrage.id} updateCheckStatus={this.updateCheckStatus}/>\n                    })}\n                    {/* <Table dataSource={barrages} primaryKey=\"id\">\n                        <Table.Column title=\"弹幕编号\" dataIndex=\"id\" alignHeader=\"center\" />\n                        <Table.Column title=\"弹幕作者\" dataIndex=\"fromName\" alignHeader=\"center\" />\n                        <Table.Column title=\"弹幕内容\" dataIndex=\"message\" alignHeader=\"center\" />\n                        <Table.Column title=\"操作\" dataIndex=\"id\" cell={this.renderOption} alignHeader=\"center\" />\n                    </Table> */}\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Barrage;\n","import React from 'react';\nimport logo from './logo.svg';\nimport Barrage from './Barrage';\nimport '@b-design/ui/dist/index.css';\nimport './App.css';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Barrage />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}