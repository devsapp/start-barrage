edition: 1.0.0 #  命令行YAML规范版本，遵循语义化版本（Semantic Versioning）规范
name: barrage #  项目名称
access: default
vars:
  domain: '{{custome-domain}}' #到万网注册一个即可
  region: cn-hongkong
  fc:
    baseUrl: "" #函数计算触发器地址，可以在部署好函数之后获得。例子： https://xxx.cn-hongkong.fc.aliyuncs.com/2016-08-15/proxy/serverlesshub/serverlesshub/
  oss:
    baseUrl: https://${vars.oss.bucketName}.oss-cn-hongkong.aliyuncs.com #oss 公网访问地址 。例子： https://<bucketname>.oss-cn-hongkong.aliyuncs.com
    bucketName: '{{oss-bucketName}}' 
    player: player
    admin: admin
    screen: screen
  tablestore:
    endpoint: '{{tablestore-endpoint}}'
    instance: '{{tablestore-instance}}'
  gateway:
    groupName: serverless-barrage
services:
  www-screen: #大屏幕应用
    component: oss # (必填) 引用 component 的名称
    actions:
      pre-deploy:
        - run: npm i && npm run build
          path: www-screen
    props:
      region: ${vars.region}
      bucket: ${vars.oss.bucketName}
      subDir: 'www-screen'  
      acl: public-read # 读写权限
      codeUri: www-screen/build
      website:
        index: index.html 
        error: 404.html 
        subDirType: redirect 
  www-player: #玩家应用
    component: oss # (必填) 引用 component 的名称
    actions:
      pre-deploy:
        - run: npm i && npm run build
          path: www-player
    props:
      region: ${vars.region}
      bucket: ${vars.oss.bucketName}
      subDir: 'www-player'
      acl: public-read
      codeUri: www-player/build
      website:
        index: index.html 
        error: 404.html 
        subDirType: redirect 
  www-admin: #管理员应用
    component: oss # (必填) 引用 component 的名称
    actions:
      pre-deploy:
        - run: npm i && npm run build
          path: www-admin
    props:
      region: ${vars.region}
      bucket: ${vars.oss.bucketName}
      subDir: 'www-admin' # 指定目录
      codeUri: www-admin/build
      acl: public-read
    website:
        index: index.html 
        error: 404.html 
        subDirType: redirect
  function-control-center:  #后台函数控制中心，这是多函数服务
    component: fc # 组件名称
    actions: 
      pre-deploy: 
        - run: npm install
          path: function-control-center
    props:
      region: ${vars.region}
      service:
        name: serverless-barrage
        description: 弹幕效果后台
        internetAccess: true
        role:
          name: tablestore
          policies:
            - AliyunOTSFullAccess
      function:
        name: barrage-control
        environmentVariables:
          endpoint: ${vars.tablestore.endpoint}
          instance: ${vars.tablestore.instance}
          notifyUrl: http://${vars.domain}/notify
        description: 
        runtime: nodejs12
        codeUri: ./http-control-center
        handler: index.handler
        initializer: index.initializer
        memorySize: 128
        timeout: 60
      triggers:
        - name: httpTrigger
          type: http
          config:
            authType: anonymous
            methods:
              - GET
              - POST
              - PUT
              - DELETE
      customDomains:
        - domainName: auto
          protocol: HTTP
          routeConfigs:
            - path: /*
  function-equipment-register: #设备注册 ，这是一个单函数服务
    component: fc # 组件名称
    actions:  
      pre-deploy:  # 安装好依赖后可以注释掉
        - run: npm install
          path: event-equipment-register
    props:
      region: ${vars.region}
      service:
        name: serverless-barrage
        description: 注册设备
        internetAccess: true
        role:
          name: tablestore
          policies:
            - AliyunOTSFullAccess
      function:
        name: register
        environmentVariables:
          endpoint: ${vars.tablestore.endpoint}
          instance: ${vars.tablestore.instance}
        description: this is a test
        runtime: nodejs12
        codeUri: ./event-equipment-register
        handler: index.register
        initializer: index.initializer
        memorySize: 128
        timeout: 60
  api-gateway:  #路由网关
    component: apigateway 
    props:
      regionId: ${vars.region}
      customerDomain: ${vars.domain} # 客户自定义域名
      groupName: ${vars.gateway.groupName} #指定分组 这里你可以分开设置环境
      stageName: RELEASE
      apis:
        - apiName: message-notify
          regionId: ${vars.region}
          webSocketApiType: NOTIFY
          requestConfig:
            requestPath: /notify
            requestProtocol: 'HTTP,HTTPS,WS'
            requestHttpMethod: POST
            requestMode: MAPPING
            bodyFormat: STREAM
          serviceConfig:
            servicePath: /notify
            serviceProtocol: HTTP
            serviceAddress: http://www.aliyun.com
            contentTypeCatagory: DEFAULT
            contentTypeValue: 'application/json; charset=UTF-8'
        - apiName: equipment-register
          regionId: ${vars.region}
          webSocketApiType: REGISTER
          requestConfig:
            requestPath: /r/*
            requestProtocol: WS
            requestHttpMethod: GET
            requestMode: PASSTHROUGH
          serviceConfig:
            contentTypeCatagory: CLIENT
            servicePath: /
            serviceProtocol: FunctionCompute
            functionComputeConfig:
              fcRegionId: ${vars.region}
              serviceName: serverless-barrage
              functionName: register
              fcType: FCEvent
              selectServiceName: serverless-barrage
              selectFunctionName: register
              fcBaseUrl: ''
            resultType: JSON
        - apiName: barrage-control-center
          regionId: ${vars.region}
          requestConfig:
            requestPath: /api/*
            requestHttpMethod: ANY
            requestMode: PASSTHROUGH
          serviceConfig:
            servicePath: /
            serviceProtocol: FunctionCompute
            functionComputeConfig:
              fcRegionId: ${vars.region}
              fcBaseUrl: ${function-control-center.output.url.system_url} # 或者直接使用 fcbaseurl
              onlyBusinessPath: false
              contentTypeCatagory: CLIENT
              path: /
            resultType: JSON
        - apiName: www-player
          regionId: ${vars.region}
          requestConfig:
            requestPath: /player/*
            requestHttpMethod: GET
          serviceConfig:
            serviceAddress: ${vars.oss.baseUrl}
            servicePath: /${vars.oss.player}/*
            serviceHttpMethod: GET
            serviceProtocol: HTTP
            resultType: JSON
        - apiName: www-admin
          regionId: ${vars.region}
          requestConfig:
            requestPath: /admin/*
            requestHttpMethod: GET
          serviceConfig:
            serviceAddress: ${vars.oss.baseUrl}
            servicePath: /${vars.oss.admin}/*
            serviceHttpMethod: GET
            serviceProtocol: HTTP
            resultType: JSON
        - apiName: www-screen
          regionId: ${vars.region}
          requestConfig:
            requestPath: /*
            requestHttpMethod: ANY
            requestProtocol: 'HTTP,HTTPS,WS'
          serviceConfig:
            serviceAddress: ${vars.oss.baseUrl}
            servicePath: /${vars.oss.screen}/
            serviceHttpMethod: ANY
            serviceProtocol: HTTP
            resultType: JSON
  dns:  
    component: dns # 这里引入的是相对路径，正式配置替换成你自己的component名称即可
    actions:
      post-deploy:
        - run: s gateway bindDomain  #dns 挂载好 gateway的域名后，需要gateway再绑定一下
          path: ./
    props:
      domainName: ${vars.domain}
      value: ${gateway.output.domain} 