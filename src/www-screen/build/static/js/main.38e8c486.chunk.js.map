{"version":3,"sources":["components/WebSocketConnection.tsx","components/Screen.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["barrageArray","ani","store","Barrage","canvas","context","obj","index","params","opacity","x","y","moveX","fontSize","this","window","innerWidth","range","height","Math","random","strokeStyle","color","font","fillStyle","fillText","value","strokeText","WebSocketConnection","props","deviceId","ws","hbStarted","registered","registerResp","reg","componentDidMount","document","querySelector","getContext","init","baseUrl","ishttps","location","protocol","socketConnectionUrl","WebSocket","onopen","openSocket","onmessage","onMessage","onclose","closeSocket","send","event","console","log","data","startsWith","msg","JSON","parse","substr","barrageData","from","message","push","forEach","cancelAnimationFrame","renderCanvas","clearRect","width","clientWidth","clientHeight","i","barrage","currentFontSize","draw","canvasBarrage","requestAnimationFrame","stringify","setInterval","currentDeviceId","localStorage","getItem","uuid","replace","setItem","now","Date","method","host","querys","headers","toString","toUTCString","getTime","path","body","id","style","innerHeight","Component","Screen","position","left","right","textAlign","bottom","marginBottom","fontWeight","src","onData","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.38e8c486.chunk.js","sourcesContent":["import { Component } from 'react';\nimport * as uuid from 'uuid';\ntype Props = {\n    baseUrl: string,\n    onData: () => void\n};\nconst barrageArray: any = [];\nlet ani: any = null;\n// 存储实例\nconst store: any = {};\n\nconst defaultFontSize = 48;\nclass Barrage {\n\n    context: any;\n    params: any;\n    opacity: any;\n    x: any;\n    y: any;\n    moveX: any;\n    constructor(canvas: any, context: any, obj: any, index: any) {\n        let fontSize = obj.fontSize || defaultFontSize;\n        this.x = window.innerWidth//canvas.width; // 开始都在边上\n\n        this.y = obj.range[0] * canvas.height + (obj.range[1] - obj.range[0]) * canvas.height * Math.random() + 36;\n        if (this.y < fontSize) {\n            this.y = fontSize;\n        } else if (this.y > canvas.height - fontSize) {\n            this.y = canvas.height - fontSize;\n        }\n        this.moveX = 1 + Math.random() * 3;\n        this.context = context;\n        this.opacity = 0.8 + 0.2 * Math.random();\n        this.params = obj;\n    }\n    draw() {\n\n        const context = this.context;\n        const params = this.params;\n        // 根据此时x位置绘制文本\n        context.strokeStyle = params.color;\n        context.font = 'bold ' + (params.fontSize || defaultFontSize) + 'px \"microsoft yahei\", sans-serif';\n        //context.fillStyle = params.color;\n        context.fillStyle = 'rgba(255,255,255,' + this.opacity + ')';\n        context.fillText(params.value, this.x, this.y);\n        context.strokeText(params.value, this.x, this.y);\n    }\n}\n\nconst canvasBarrage = function (canvas: any) {\n    if (!canvas) {\n        return;\n    }\n    canvas.width = canvas.clientWidth;\n    canvas.height = canvas.clientHeight;\n\n\n    // 绘制弹幕文本\n    for (let index in store) {\n        let i: any = index;\n        let barrage = store[index];\n        let currentFontSize = barrage.fontSize || defaultFontSize;\n        // 位置变化\n        barrage.x -= barrage.moveX;\n        if (barrage.x < -1 * window.innerWidth * 1) { // 移除后不再变化\n            // 移动到画布外部时候从左侧开始继续位移\n            barrage.x = (1 + i * 0.1 / Math.random()) * canvas.width;\n            barrage.y = (barrage.params.range[0] + (barrage.params.range[1] - barrage.params.range[0]) * Math.random()) * canvas.height;\n            if (barrage.y < currentFontSize) {\n                barrage.y = currentFontSize;\n            } else if (barrage.y > canvas.height - currentFontSize) {\n                barrage.y = canvas.height - currentFontSize;\n            }\n            barrage.moveX = 1 + Math.random() * 3;\n        } else {\n            // 根据新位置绘制圆圈圈\n            barrage.draw();\n        }\n    }\n\n}\nclass WebSocketConnection extends Component<Props, any> {\n    protected deviceId: string = '';\n    protected ws: any;\n    protected hbStarted: boolean = false;\n    protected registered: boolean = false;\n    protected registerResp: boolean = false;\n    protected reg: any;\n    canvas: any;\n    context: any;\n    constructor(props: Props) {\n        super(props);\n        const currentDeviceId = window.localStorage.getItem('s-deviceId');\n        this.deviceId = currentDeviceId || uuid.v4().replace(/-/g, '').substr(0, 8);\n        window.localStorage.setItem('s-deviceId', this.deviceId);\n        const now = new Date();\n        this.reg = {\n            method: 'GET',\n            host: `${props.baseUrl}:8080`,\n            querys: {\n                'docId': 'devs',\n                'type': 'screen',\n                'userId': this.deviceId,\n            },\n            headers: {\n                'x-ca-websocket_api_type': ['REGISTER'],\n                'x-ca-seq': ['0'],\n                'x-ca-nonce': [uuid.v4().toString()],\n                'date': [now.toUTCString()],\n                'x-ca-timestamp': [now.getTime().toString()],\n                'CA_VERSION': ['1'],\n            },\n            path: '/r',\n            body: '',\n        };\n    }\n\n    componentDidMount = () => {\n        this.canvas = document.querySelector('#canvasBarrage');\n\n        this.context = this.canvas.getContext('2d');\n        this.init();\n\n    }\n\n    init = () => {\n        const { baseUrl } = this.props;\n        const ishttps = 'https:' == document.location.protocol ? true : false;\n        const socketurl = ishttps ? 'wss:' : 'ws:';\n        const socketConnectionUrl = `${socketurl}//${baseUrl}:8080`;\n        const ws = new window.WebSocket(socketConnectionUrl);\n        this.ws = ws;\n        ws.onopen = this.openSocket;\n        ws.onmessage = this.onMessage;\n        ws.onclose = this.closeSocket;\n    }\n\n    openSocket = () => {\n\n        this.ws.send('RG#' + this.deviceId);\n    }\n\n    closeSocket = () => {\n\n    }\n\n    onMessage = (event: any) => {\n        console.log('data:', event.data);\n\n         // 画布渲染\n         const renderCanvas = () => {\n            // 清除画布\n            this.context.clearRect(0, 0, this.canvas.width, this.canvas.height);\n            // 绘制画布上所有的圆圈圈\n            canvasBarrage(this.canvas);\n            // 继续渲染\n            ani = window.requestAnimationFrame(renderCanvas);\n        };\n\n        if (event.data.startsWith('NF#')) {\n\n            const msg = JSON.parse(event.data.substr(3));\n            const barrageData = {\n                value: msg.from + '说：' + msg.message,\n                color: msg.color || 'blue',\n                range: [0, 0.5]\n            }\n            barrageArray.push(barrageData);\n            barrageArray.forEach((obj: any, index: any) => {\n                if (!store[index]) {\n                    store[index] = new Barrage(this.canvas, this.context, obj, index);\n                };\n            });\n            if (ani) {\n                window.cancelAnimationFrame(ani);\n            }\n            renderCanvas();\n            return;\n        }\n\n        if (!this.hbStarted && event.data.startsWith('RO#')) {\n            console.log('login successfully');\n            if (!this.registered) {\n                this.registered = true;\n                this.ws.send(JSON.stringify(this.reg));\n            }\n\n            this.hbStarted = true;\n            setInterval(() => {\n                this.ws.send('H1');\n            }, 15 * 1000);\n\n\n            return;\n        }\n\n\n    }\n\n    render() {\n\n        return (\n            <div>\n                <canvas id=\"canvasBarrage\" style={{ height: window.innerHeight, width: '100%' }} height={window.innerHeight}></canvas>\n            </div>\n        );\n    }\n}\n\nexport default WebSocketConnection;\n","import { Component } from 'react';\nimport WebSocketConnection from './WebSocketConnection';\ntype Props = {\n\n};\nconst baseUrl = ''; // 本地调试的时候可以设置\nclass Screen extends Component<Props, any> {\n    constructor(props: Props) {\n        super(props);\n    }\n\n    componentDidMount = () => {\n\n    }\n\n    render() {\n\n        return (\n            <div>\n                <div style={{ fontSize: '24px', color: 'white', position: 'absolute', left: 0, right: 0, textAlign: 'center', bottom: 60 }}>\n                    <div style={{ marginBottom: 12, fontWeight: 'bold' }}>欢迎扫描屏幕下二维码，跟阿里云 Serverless 发弹幕互动</div>\n                    <img src=\"https://img.alicdn.com/imgextra/i4/O1CN01RPyWwn1hVCg03f6Xc_!!6000000004282-2-tps-354-360.png\" style={{ width: 240, height: 240 }} />\n                </div>\n                <WebSocketConnection baseUrl={baseUrl || window.location.host} onData={() => { }} />\n            </div>\n        );\n    }\n}\n\nexport default Screen;\n","import React from 'react';\nimport Screen from './components/Screen';\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Screen />\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}